# -*- coding: utf-8 -*-
"""SVM&XGBC&LGB Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14OXga_jtjZ9vd41YAP4zLtWwxGAPmqdu
"""

import pefile
import os
import json
import hashlib
import pandas as pd
import csv
import pickle
def contain_symbol(keyword):
  symbols = "~!@#$%^&*()_+-*/<>,.[]\/"
  for symbol in symbols:
      if symbol in keyword:
          return True
  else:
      return False
def parse_pe(path):
  api_call = []
  api_seq = []
  pef = pefile.PE(path)
  for entry in pef.DIRECTORY_ENTRY_IMPORT:
    for API in entry.imports:
      name = API.name.decode('UTF-8')
      if contain_symbol(name):
        name = 'Garbled'
      if api_call.count(name)==0:
        api_call.append(name)
  api_call.sort()
  for each in api_call:
    try:
      tmp = import_api_dict[each]
    except:
      continue
    api_seq.append(tmp)
  ret_val = ''
  for each in api_seq:
    ret_val = ret_val + str(each) + '/'
  return ret_val[:-1]

def pad(seq):
  seq = seq.split('/')
  tmp = []
  for i in range(len(seq)):
    tmp.append(int(seq[i]))
  ret_val = []
  for i in range(len(import_api_dict)):
      if tmp.count(i)==0:
          ret_val.append(0)
      else:
          ret_val.append(1)
  return ret_val

def report_generator(number, pred, top10):
  jobj = {
    'Task_ID':number,
    'Result':
    {
      'Malicious':pred[0][0]
    },
    'Top10_important_Feature':top10
  }
  return jobj

import_api_dict = {}
with open('/content/drive/My Drive/import_api_dict.csv', 'r') as csvfile:
  rows = csv.DictReader(csvfile)
  for row in rows:
    import_api_dict.update({row['api']:row['num']})

api_list = []
for each in import_api_dict:
  api_list.append(each)

api_dict = {}
for i in range(len(api_list)):
  api_dict.update({api_list[i]: int})

def main_function(path):
  try:
    import_api = parse_pe(path)
  except:
    return 'Not PE file'

  seq = pad(import_api)
  seq_dict = {}
  for i in range(len(import_api_dict)):
    if seq[i]==1:
      seq_dict.update({api_list[i]:1})
    else:
      seq_dict.update({api_list[i]:0})
  seq_pd = pd.DataFrame(seq_dict,index=[0])
  top10 = [seq[8862], seq[8643], seq[4869], seq[4011], seq[12580], seq[7561], seq[2833], seq[12803], seq[4009], seq[1807]]

  #pickle_in = open('path/to/SVM.pickle','rb')
  pickle_in = open('/content/drive/My Drive/XGB.pickle','rb')
  XGB = pickle.load(pickle_in)
  pred = XGB.predict_proba(seq_pd)

  ret_val = report_generator(1, pred, top10)
  return ret_val

